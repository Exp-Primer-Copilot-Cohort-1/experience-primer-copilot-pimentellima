/* eslint-disable @typescript-eslint/naming-convention */
// Generated by https://quicktype.io
import { ObjectId } from '@ioc:Mongoose'

import { IAddress } from './IAddress'
import { IFormAnswer } from './IFormAnswer'
import { Generic } from './ITransaction'

export type ProfWithAccess = {
	prof_id: string
	name: string
	start?: Date
	end?: Date
}

export type ISponsor = {
	name: string
	phone: string
}


export enum Genders {
	male = 'M',
	female = 'F',
	other = 'NB',
	not_informed = 'O',
}
export interface IUserClient extends Partial<IAddress> {
	_id?: string
	name: string
	social_name?: string
	avatar?: string
	form_answers?: IFormAnswer[]
	profs_with_access?: ProfWithAccess[]
	birth_date: string | Date
	gender?: Genders
	document: string
	rg?: string
	celphone: string
	underaged?: boolean
	sponsor?: ISponsor
	phone?: string
	naturalness?: string
	nationality?: string
	profession?: string
	observation?: string
	sms_checked?: boolean
	mail_checked?: boolean
	email?: string
	unity_id?: ObjectId | string
	active?: boolean
	partner?: Generic | string | null
	due_date?: Date
	created_at?: Date
	updated_at?: Date
}

export interface IClient {
	value: string
	label: string
	celphone?: string
	email?: string
	partner?: Generic
}
